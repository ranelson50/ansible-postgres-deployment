---
# tasks file for postgresql-upgrade
- name: Load variables
  include_vars: "{{ item }}"
  with_first_found:
    - files:
        - "{{ ansible_os_family|lower }}-{{ ansible_distribution|lower }}-{{ ansible_distribution_major_version }}.yml"
        - "{{ ansible_os_family|lower }}-{{ ansible_distribution|lower }}-{{ ansible_distribution_version }}.yml"
        - "{{ ansible_os_family|lower }}-{{ ansible_distribution|lower }}.yml"
        - "{{ ansible_os_family|lower }}-{{ ansible_distribution_major_version }}.yml"
        - "{{ ansible_os_family|lower }}.yml"
        - defaults.yml

- name: Install  prereq_packages
  package:
    name: "{{ prereq_packages }}"
    update_cache: yes
    state: present

- name: Performing SELECT version();
  postgresql_query:
    query: SELECT version()
  register: select_version
  become: true
  become_user: postgres

- name: print version
  debug:
    msg: "{{ select_version.query_result[0].version }}"

- name: Performing SHOW server_version;
  postgresql_query:
    query: SHOW server_version
  register: select_server_version
  become: true
  become_user: postgres

- name: print version
  debug:
    msg: "{{ select_server_version.query_result[0].server_version }}"

- name: set current version to {{ select_server_version.query_result[0].server_version.split('.') }}
  set_fact:
    current_version: "{{ select_server_version.query_result[0].server_version.split('.') }}"

- name: set desired version variable to {{ (upgrade_to_version | string).split('.')}}
  set_fact:
    desired_version: "{{ (upgrade_to_version | string).split('.')}} "

- name: fail if downgrade
  fail:
    msg: "Downgrade is not supported"
  when:  (upgrade_to_version is version(select_server_version.query_result[0].server_version, '<')) and desired_version | length > 2

- name: fail if downgrade
  fail:
    msg: "Downgrade is not supported"
  when:  (upgrade_to_version  is version(current_version[0:-1] | join('.'), '<')) and desired_version | length < 3

- debug:
    msg: "assuming latest version of postgresql {{ postgres_version }} as minor version is not installed"
  when: desired_version[0] | int < 10 and desired_version|length < 3 

# # - debug:
# #     msg: "Major verson is the same "
# #   when: (desired_version[0] == current_version[0] and current_version[0] | int > 10) or desired_version is 

- name: Add the postgres repository (yum)
  yum_repository:
    name: "{{ postgres_repo_name }}"
    description: "PostgreSQL"
    baseurl: "{{ postgres_repo_url }}"
    state: present
    gpgcheck: yes
    gpgkey: "{{ postgres_repo_key }}"
  when: ansible_os_family|lower == "redhat"

- name: Install Epel repository....
  action: yum name={{ epel_url }} state=installed
  become: True
  when: ansible_os_family|lower == "redhat" and epel_url is defined

- name: Add the postgres repository key (apt)
  apt_key:
    data: "{{ lookup('file', postgres_repo_keyfile) }}"
    id: "{{ postgres_repo_key }}"
  when: ansible_os_family|lower == "debian"

- name: Add the postgres repository (apt)
  apt_repository:
    filename: pgdg
    repo: "{{ item }}"
    state: present
    update_cache: yes
  with_items:
    - "deb {{ postgres_repo_url }} {{ ansible_lsb.codename }}-pgdg main"
  when: ansible_os_family|lower == "debian"


- name: Install  latest packages {{ postgres_packages }}
  package:
    name: "{{ postgres_packages }}"
    update_cache: yes
    state: latest
  when:  (desired_version | length < 3 and desired_version[0]  | int  < 10) or  (desired_version | length < 2 and desired_version[0]  | int  >= 10)

- name: Install  {{ upgrade_to_version }} packages
  package:
    name: "{{ postgres_packages_minor }}"
    update_cache: yes
    state: present
  when:   (desired_version | length >= 3 and desired_version[0]  | int  < 10) or  (desired_version | length >= 2 and desired_version[0]  | int  >= 10)


# Run pg_upgrade if major version has changed
- name: Run pg_upgrade if major version has changed
  include_tasks: pg_upgrade.yml
  when: (desired_version[0] != current_version[0]) or (desired_version[0] | int == 9  and desired_version[1] != current_version[1] )
  tags:
    - pg_upgrade
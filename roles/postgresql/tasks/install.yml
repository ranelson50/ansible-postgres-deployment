---
- name: set patch version for testing
  set_fact:
      patch_version: '17'
  when: version == '9.6'

- name: set patch version for testing
  set_fact:
      patch_version: '11'
  when: version == '10'

- name: set patch version for testing
  set_fact:
      patch_version: '3'
  when: version == '11'

- name: set patch version for testing
  set_fact:
       patch_version: '2'
  when: version == '12' 

- name: set postgresql server specific version and its dependencies
  set_fact:
       postgres_server_package: "postgresql{{ version | replace('.','') }}-server-{{ version  }}.{{ patch_version }}-1PGDG.rhel{{ ansible_distribution_major_version }}.{{ ansible_architecture }}.rpm"
       postgres_libs_package: "postgresql{{ version | replace('.','') }}-libs-{{ version  }}.{{ patch_version }}-1PGDG.rhel{{ ansible_distribution_major_version }}.{{ ansible_architecture }}.rpm"
       postgres_devel_package: "postgresql{{ version | replace('.','') }}-devel-{{ version }}.{{ patch_version }}-1PGDG.rhel{{ ansible_distribution_major_version }}.{{ ansible_architecture }}.rpm"
       postgres_contrib_package: "postgresql{{ version | replace('.','') }}-contrib-{{ version }}.{{ patch_version }}-1PGDG.rhel{{ ansible_distribution_major_version }}.{{ ansible_architecture }}.rpm"
       postgres_package: "postgresql{{ version | replace('.','') }}-{{ version }}.{{ patch_version }}-1PGDG.rhel{{ ansible_distribution_major_version }}.{{ ansible_architecture }}.rpm"



- block:
  - name: get current running version
    become: true
    become_user: postgres
    postgresql_info:
        filter:  "version,settings"
    register: postgres_fact_output

  
  - name: postgresql status
    import_role:
      name: dbaas_api_services
      tasks_from: db_checklist_status_all.yml
    vars:
      task_key: "{{ ansible_hostname }}"
      task_area: "PostgreSQL Upgrade"
      task_id: "{{ ticket_ref }}"
      task_status: "IN_PROGRESS"
      task_message: "set variables"
      standard_task_id: "{{ standard_task_id }}"
    tags:
    - apex_api
    
  - set_fact:
        old_version: '9.6'
    when: postgres_fact_output['version']['major'] == 9 and postgres_fact_output['version']['minor'] == 6 
  - set_fact:
        postgres_home: "{{ postgres_fact_output['settings']['data_directory']['setting'] | dirname | dirname }}/{{ version }}"
  - set_fact:
        postgres_data_directory: "{{ postgres_home }}/data"

  - set_fact:
        old_version: "{{ postgres_fact_output['version']['major'] }}"
    when: postgres_fact_output['version']['major'] > 9

    
  - name: postgresql status
    import_role:
      name: dbaas_api_services
      tasks_from: db_checklist_status_all.yml
    vars:
      task_key: "{{ ansible_hostname }}"
      task_area: "PostgreSQL Upgrade"
      task_id: "{{ ticket_ref }}"
      task_status: "IN_PROGRESS"
      task_message: "stop current server"
      standard_task_id: "{{ standard_task_id }}"
    tags:
    - apex_api

  - name: stop current server
    service: 
          name: "postgresql-{{ old_version }}"
          state: stopped

  when: not fresh_install

- name: postgresql status
  import_role:
    name: dbaas_api_services
    tasks_from: db_checklist_status_all.yml
  vars:
    task_key: "{{ ansible_hostname }}"
    task_area: "PostgreSQL Insstall"
    task_id: "{{ ticket_ref }}"
    task_status: "IN_PROGRESS"
    task_message: "Install dependencies"
    standard_task_id: "{{ standard_task_id }}"
  tags:
  - apex_api

- name: Add the postgres repository (yum)
  yum_repository:
    name: "{{ postgres_repo_name }}"
    description: "PostgreSQL"
    baseurl: "{{ postgres_repo_url }}"
    state: present
    gpgcheck: yes
    gpgkey: "{{ postgres_repo_key }}"
  when: ansible_os_family|lower != "redhat"

- name: Install Epel repository....
  action: yum name={{ epel_url }} state=installed
  become: True
  when: ansible_os_family|lower == "redhat" and epel_url is defined

- name: Add the postgres repository key (apt)
  apt_key:
    data: "{{ lookup('file', postgres_repo_keyfile) }}"
    id: "{{ postgres_repo_key }}"
  when: ansible_os_family|lower == "debian"

- name: Add the postgres repository (apt)
  apt_repository:
    filename: pgdg
    repo: "{{ item }}"
    state: present
    update_cache: yes
  with_items:
    - "deb {{ postgres_repo_url }} {{ ansible_lsb.codename }}-pgdg main"
  when: ansible_os_family|lower == "debian"

- name: Install Dependency for CentOS
  block:
  - name: Install CentOS SCLo RH repository
    yum:
      name: centos-release-scl-rh
      state: present
  - name: Install llvm-toolset-7-clang
    yum:
      name: llvm-toolset-7-clang
      state: present
  when: ansible_distribution == "CentOS"

#- name: Install  packages # for tests
#  package:
#    name: "{{ postgres_packages }}"
#    update_cache: yes
#    state: present

- name: Install  postgres packages
  yum:
    name:
     - "{{ postgres_base_repo_url  }}/rhel-{{ ansible_distribution_version }}-{{  ansible_architecture }}/{{  postgres_server_package  }}"
     - "{{ postgres_base_repo_url  }}/rhel-{{ ansible_distribution_version }}-{{  ansible_architecture }}/{{  postgres_contrib_package  }}"
     - "{{ postgres_base_repo_url  }}/rhel-{{ ansible_distribution_version }}-{{  ansible_architecture }}/{{  postgres_devel_package  }}"
     - "{{ postgres_base_repo_url  }}/rhel-{{ ansible_distribution_version }}-{{  ansible_architecture }}/{{  postgres_libs_package  }}"
     - "{{ postgres_base_repo_url  }}/rhel-{{ ansible_distribution_version }}-{{  ansible_architecture }}/{{  postgres_package  }}"
    state: present
  
- name: Install python packages
  yum: 
    name:
    - python-psycopg2
    - python-pip 
    - libselinux-python
    state: present

- name: install psycopg2 and psycopg2-binary python modules
  pip:
    name:
      - psycopg2
      - psycopg2-binary
  become: True

- name: change data dir in postgresql config
  become: True
  lineinfile:
    path: "/usr/lib/systemd/system/postgresql-{{ version }}.service"
    regexp: '^Environment=PGDATA='
    line: "Environment=PGDATA={{ postgres_data_directory }}"

- name: change permission on home directory
  become: true
  file: 
      path: "{{ postgres_data_directory }}"
      owner: postgres
      group: postgres
      mode: '700'
      state:  directory

- name: Initiate postgres
  become: true
  become_user: "postgres"
  command: "{{ postgres_initdb_command }} --pgdata={{ postgres_data_directory }}"
  args:
    creates: "{{ postgres_hba_file }}"
    warn: false
  tags:
    - initdb

- name: Make postgres listen on all network interfaces 
  become: True
  lineinfile:
    path: "{{ postgres_config_file }}"
    regexp: "^#listen_addresses = 'localhost'"
    line: "listen_addresses = '*'"

- name: start postgres server
  service: 
    name: "postgresql-{{ version }}"
    state: started

- name: postgresql status
  import_role:
    name: dbaas_api_services
    tasks_from: db_checklist_status_all.yml
  vars:
    task_key: "{{ ansible_hostname }}"
    task_area: "PostgreSQL Install"
    task_id: "{{ ticket_ref }}"
    task_status: "SUCCESS"
    task_message: "Postgres installation successfull"
    standard_task_id: "{{ standard_task_id }}"
  tags:
  - apex_api

- block:

    - name: Upgrade progresql status
      import_role:
        name: dbaas_api_services
        tasks_from: db_checklist_status_all.yml
      vars:
        task_key: "{{ ansible_hostname }}"
        task_area: "PostgreSQL Upgrade"
        task_id: "{{ ticket_ref }}"
        task_status: "SUCCESS"
        task_message: "server upgraded to specified version"
        standard_task_id: "{{ standard_task_id }}"
      tags:
        - apex_api

    - name: send upgraded database server version to DCC API
      import_role: 
             name: postgresql-catalog
      vars:
        catalog_dest_type: "DB_CATALOG_DETAIL_UPGRADE"

  when: not fresh_install

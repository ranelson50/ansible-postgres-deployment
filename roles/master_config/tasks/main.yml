---
- name: Configure {{ postgresql_config_file }}
  lineinfile:
    dest: "{{ postgresql_config_file }}"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  loop:
    - {regexp: "^#?wal_level = .*", line: "wal_level = replica" }
    - {regexp: "^#?synchronous_commit = .*", line: "synchronous_commit = local" }
    - {regexp: "^#?archive_mode = .*", line: "archive_mode = on"}
    - {regexp: "^#?archive_command = .*", line: "archive_command = 'cp %p {{ postgresql_data_directory }}/archive/%f'" }
    - {regexp: "^#?max_wal_senders = .*", line: "max_wal_senders = 10"}
# This one broke the service    - {regexp: "^#?wal_keep_segments = .*", line: "wal_keep_segments = 32" }
    - {regexp: "^#?max_replication_slots = .*", line: "max_replication_slots  = 10" }
  become: True

- name: Create a new directory, change its permission, and change the owner to the postgres user.
  become: true
  file:
    path: "{{ archive_directory }}"
    state: directory
    recurse: yes
    owner: postgres
    group: postgres
    mode: '0700'

- name: Debug hostvars
  debug:
     msg: "{{ hostvars[item]['ansible_facts']['default_ipv4']['address'] }}"
  with_items: "{{ groups['replicas'] }}"
  when: item in "{{ groups['databases'] }}"

- name:  Add all replica IPs to pg_hba.conf
  become: true
  postgresql_pg_hba:
    dest: "{{ postgresql_hba_file }}"
    contype: host
    users: replicator
    source: "{{ hostvars[item]['ansible_facts']['default_ipv4']['address'] }}/32" 
    databases: replication
    method: trust
  with_items: "{{ groups['replicas'] }}"
  when: item in "{{ groups['databases'] }}"

- name: Create replica user and set password
  become: true
  become_user: postgres
  postgresql_user:
    name: replicator
    state: present
    password: "{{ postgresql_replica_password }}"
    role_attr_flags: REPLICATION
    encrypted: true

- name: Restart postgresql.service
  become: true
  service: 
    state: restarted
    name: postgresql.service

- name: Check to see if replication slot exists for replicas yet.
  become: true
  become_user: postgres
  postgresql_query:
    db: postgres
    query: select * from pg_replication_slots
  register: replication_slots

- name: set replication slot for replicas
  become: true
  become_user: postgres
  postgresql_query:
    db: postgres
    query: select * from pg_create_physical_replication_slot(%s)
    positional_args:
        - "{{ item | lower | replace('-','_') }}"
  with_items: "{{ groups['replicas'] }}"
  when: item in "{{ groups['databases'] }}" and item not in "{{ replication_slots }}"